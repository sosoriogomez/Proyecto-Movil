{"version":3,"names":["_Host","require","_JsiSkImage","_JsiSkData","JsiSkImageFactory","Host","constructor","CanvasKit","MakeImageFromViewTag","viewTag","view","console","log","Promise","resolve","MakeImageFromPlatformBuffer","_platformBuffer","Error","MakeImageFromEncoded","encoded","image","JsiSkData","fromValue","JsiSkImage","MakeImage","info","data","bytesPerRow","alphaType","getEnum","AlphaType","colorSpace","ColorSpace","SRGB","colorType","ColorType","height","width","exports"],"sources":["JsiSkImageFactory.ts"],"sourcesContent":["import type { CanvasKit } from \"canvaskit-wasm\";\n\nimport type {\n  SkData,\n  ImageInfo,\n  SkImage,\n  PlatformBuffer,\n  ImageFactory,\n} from \"../types\";\n\nimport { Host, getEnum } from \"./Host\";\nimport { JsiSkImage } from \"./JsiSkImage\";\nimport { JsiSkData } from \"./JsiSkData\";\n\nexport class JsiSkImageFactory extends Host implements ImageFactory {\n  constructor(CanvasKit: CanvasKit) {\n    super(CanvasKit);\n  }\n\n  MakeImageFromViewTag(viewTag: number): Promise<SkImage | null> {\n    const view = viewTag as unknown as HTMLElement;\n    // TODO: Implement screenshot from view in React JS\n    console.log(view);\n    return Promise.resolve(null);\n  }\n\n  MakeImageFromPlatformBuffer(_platformBuffer: PlatformBuffer): SkImage {\n    throw new Error(\n      \"MakeImageFromPlatformBuffer() is only available on iOS and Android!\"\n    );\n  }\n\n  MakeImageFromEncoded(encoded: SkData) {\n    const image = this.CanvasKit.MakeImageFromEncoded(\n      JsiSkData.fromValue(encoded)\n    );\n    if (image === null) {\n      return null;\n    }\n    return new JsiSkImage(this.CanvasKit, image);\n  }\n\n  MakeImage(info: ImageInfo, data: SkData, bytesPerRow: number) {\n    // see toSkImageInfo() from canvaskit\n    const image = this.CanvasKit.MakeImage(\n      {\n        alphaType: getEnum(this.CanvasKit.AlphaType, info.alphaType),\n        colorSpace: this.CanvasKit.ColorSpace.SRGB,\n        colorType: getEnum(this.CanvasKit.ColorType, info.colorType),\n        height: info.height,\n        width: info.width,\n      },\n      JsiSkData.fromValue(data),\n      bytesPerRow\n    );\n    if (image === null) {\n      return null;\n    }\n    return new JsiSkImage(this.CanvasKit, image);\n  }\n}\n"],"mappings":";;;;;;AAUA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;AAEO,MAAMG,iBAAiB,SAASC,UAAI,CAAyB;EAClEC,WAAWA,CAACC,SAAoB,EAAE;IAChC,KAAK,CAACA,SAAS,CAAC;EAClB;EAEAC,oBAAoBA,CAACC,OAAe,EAA2B;IAC7D,MAAMC,IAAI,GAAGD,OAAiC;IAC9C;IACAE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,OAAOG,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAC9B;EAEAC,2BAA2BA,CAACC,eAA+B,EAAW;IACpE,MAAM,IAAIC,KAAK,CACb,qEACF,CAAC;EACH;EAEAC,oBAAoBA,CAACC,OAAe,EAAE;IACpC,MAAMC,KAAK,GAAG,IAAI,CAACb,SAAS,CAACW,oBAAoB,CAC/CG,oBAAS,CAACC,SAAS,CAACH,OAAO,CAC7B,CAAC;IACD,IAAIC,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAI;IACb;IACA,OAAO,IAAIG,sBAAU,CAAC,IAAI,CAAChB,SAAS,EAAEa,KAAK,CAAC;EAC9C;EAEAI,SAASA,CAACC,IAAe,EAAEC,IAAY,EAAEC,WAAmB,EAAE;IAC5D;IACA,MAAMP,KAAK,GAAG,IAAI,CAACb,SAAS,CAACiB,SAAS,CACpC;MACEI,SAAS,EAAE,IAAAC,aAAO,EAAC,IAAI,CAACtB,SAAS,CAACuB,SAAS,EAAEL,IAAI,CAACG,SAAS,CAAC;MAC5DG,UAAU,EAAE,IAAI,CAACxB,SAAS,CAACyB,UAAU,CAACC,IAAI;MAC1CC,SAAS,EAAE,IAAAL,aAAO,EAAC,IAAI,CAACtB,SAAS,CAAC4B,SAAS,EAAEV,IAAI,CAACS,SAAS,CAAC;MAC5DE,MAAM,EAAEX,IAAI,CAACW,MAAM;MACnBC,KAAK,EAAEZ,IAAI,CAACY;IACd,CAAC,EACDhB,oBAAS,CAACC,SAAS,CAACI,IAAI,CAAC,EACzBC,WACF,CAAC;IACD,IAAIP,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAI;IACb;IACA,OAAO,IAAIG,sBAAU,CAAC,IAAI,CAAChB,SAAS,EAAEa,KAAK,CAAC;EAC9C;AACF;AAACkB,OAAA,CAAAlC,iBAAA,GAAAA,iBAAA"}