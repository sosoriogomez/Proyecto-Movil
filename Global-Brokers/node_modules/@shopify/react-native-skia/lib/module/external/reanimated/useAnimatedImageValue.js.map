{"version":3,"names":["useEffect","useAnimatedImage","throwOnMissingReanimated","useFrameCallback","useSharedValue","DEFAULT_FRAME_DURATION","useAnimatedImageValue","source","paused","defaultPaused","isPaused","currentFrame","lastTimestamp","animatedImage","err","console","error","Error","message","frameDuration","currentFrameDuration","frameInfo","value","timestamp","elapsed","decodeNextFrame","dispose","getCurrentFrame"],"sources":["useAnimatedImageValue.ts"],"sourcesContent":["import { useEffect } from \"react\";\nimport { type FrameInfo, type SharedValue } from \"react-native-reanimated\";\n\nimport { useAnimatedImage } from \"../../skia/core/AnimatedImage\";\nimport type { DataSourceParam, SkImage } from \"../../skia/types\";\n\nimport {\n  throwOnMissingReanimated,\n  useFrameCallback,\n  useSharedValue,\n} from \"./moduleWrapper\";\n\nconst DEFAULT_FRAME_DURATION = 60;\n\nexport const useAnimatedImageValue = (\n  source: DataSourceParam,\n  paused?: SharedValue<boolean>\n) => {\n  throwOnMissingReanimated();\n  const defaultPaused = useSharedValue(false);\n  const isPaused = paused ?? defaultPaused;\n  const currentFrame = useSharedValue<null | SkImage>(null);\n  const lastTimestamp = useSharedValue(-1);\n  const animatedImage = useAnimatedImage(\n    source,\n    (err) => {\n      console.error(err);\n      throw new Error(`Could not load animated image - got '${err.message}'`);\n    },\n    false\n  );\n  const frameDuration =\n    animatedImage?.currentFrameDuration() || DEFAULT_FRAME_DURATION;\n\n  useFrameCallback((frameInfo: FrameInfo) => {\n    if (!animatedImage) {\n      currentFrame.value = null;\n      return;\n    }\n    if (isPaused.value && lastTimestamp.value !== -1) {\n      return;\n    }\n    const { timestamp } = frameInfo;\n    const elapsed = timestamp - lastTimestamp.value;\n\n    // Check if it's time to switch frames based on GIF frame duration\n    if (elapsed < frameDuration) {\n      return;\n    }\n\n    // Update the current frame\n    animatedImage.decodeNextFrame();\n    if (currentFrame.value) {\n      currentFrame.value.dispose();\n    }\n    currentFrame.value = animatedImage.getCurrentFrame();\n\n    // Update the last timestamp\n    lastTimestamp.value = timestamp;\n  });\n  useEffect(() => {\n    return () => {\n      animatedImage?.dispose();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return currentFrame;\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AAGjC,SAASC,gBAAgB,QAAQ,+BAA+B;AAGhE,SACEC,wBAAwB,EACxBC,gBAAgB,EAChBC,cAAc,QACT,iBAAiB;AAExB,MAAMC,sBAAsB,GAAG,EAAE;AAEjC,OAAO,MAAMC,qBAAqB,GAAGA,CACnCC,MAAuB,EACvBC,MAA6B,KAC1B;EACHN,wBAAwB,CAAC,CAAC;EAC1B,MAAMO,aAAa,GAAGL,cAAc,CAAC,KAAK,CAAC;EAC3C,MAAMM,QAAQ,GAAGF,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIC,aAAa;EACxC,MAAME,YAAY,GAAGP,cAAc,CAAiB,IAAI,CAAC;EACzD,MAAMQ,aAAa,GAAGR,cAAc,CAAC,CAAC,CAAC,CAAC;EACxC,MAAMS,aAAa,GAAGZ,gBAAgB,CACpCM,MAAM,EACLO,GAAG,IAAK;IACPC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAM,IAAIG,KAAK,CAAE,wCAAuCH,GAAG,CAACI,OAAQ,GAAE,CAAC;EACzE,CAAC,EACD,KACF,CAAC;EACD,MAAMC,aAAa,GACjB,CAAAN,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEO,oBAAoB,CAAC,CAAC,KAAIf,sBAAsB;EAEjEF,gBAAgB,CAAEkB,SAAoB,IAAK;IACzC,IAAI,CAACR,aAAa,EAAE;MAClBF,YAAY,CAACW,KAAK,GAAG,IAAI;MACzB;IACF;IACA,IAAIZ,QAAQ,CAACY,KAAK,IAAIV,aAAa,CAACU,KAAK,KAAK,CAAC,CAAC,EAAE;MAChD;IACF;IACA,MAAM;MAAEC;IAAU,CAAC,GAAGF,SAAS;IAC/B,MAAMG,OAAO,GAAGD,SAAS,GAAGX,aAAa,CAACU,KAAK;;IAE/C;IACA,IAAIE,OAAO,GAAGL,aAAa,EAAE;MAC3B;IACF;;IAEA;IACAN,aAAa,CAACY,eAAe,CAAC,CAAC;IAC/B,IAAId,YAAY,CAACW,KAAK,EAAE;MACtBX,YAAY,CAACW,KAAK,CAACI,OAAO,CAAC,CAAC;IAC9B;IACAf,YAAY,CAACW,KAAK,GAAGT,aAAa,CAACc,eAAe,CAAC,CAAC;;IAEpD;IACAf,aAAa,CAACU,KAAK,GAAGC,SAAS;EACjC,CAAC,CAAC;EACFvB,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXa,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEa,OAAO,CAAC,CAAC;IAC1B,CAAC;IACD;EACF,CAAC,EAAE,EAAE,CAAC;EACN,OAAOf,YAAY;AACrB,CAAC"}